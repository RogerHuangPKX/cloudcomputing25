{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nimport { createRouter, createWebHistory } from 'vue-router';\nimport DashboardView from '../views/DashboardView.vue';\nimport LoginView from '../views/LoginView.vue';\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: LoginView\n}, {\n  path: '/',\n  name: 'Dashboard',\n  component: DashboardView,\n  meta: {\n    requiresAuth: true\n  } // Example for protected route\n}\n// Redirect to login if no other route matches and not authenticated\n// This might be better handled in a navigation guard\n// { path: '/:pathMatch(.*)*', redirect: '/login' }\n];\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL || '/'),\n  // Ensure BASE_URL is configured if deploying to subpath\n  routes\n});\n\n// Navigation Guard (basic example)\nrouter.beforeEach((to, from, next) => {\n  // const loggedIn = localStorage.getItem('admin-token'); // Simple token check (old way)\n  const isAdminLoggedIn = localStorage.getItem('isAdminLoggedIn') === 'true';\n  if (to.matched.some(record => record.meta.requiresAuth) && !isAdminLoggedIn) {\n    next('/login');\n  } else if (to.path === '/login' && isAdminLoggedIn) {\n    next('/'); // Redirect to dashboard if trying to access login page while already logged in\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","DashboardView","LoginView","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","isAdminLoggedIn","localStorage","getItem","matched","some","record"],"sources":["/home/jh9108/project-2/admin_panel/frontend/admin-app/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router';\nimport DashboardView from '../views/DashboardView.vue';\nimport LoginView from '../views/LoginView.vue';\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: LoginView,\n  },\n  {\n    path: '/',\n    name: 'Dashboard',\n    component: DashboardView,\n    meta: { requiresAuth: true }, // Example for protected route\n  },\n  // Redirect to login if no other route matches and not authenticated\n  // This might be better handled in a navigation guard\n  // { path: '/:pathMatch(.*)*', redirect: '/login' }\n];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL || '/'), // Ensure BASE_URL is configured if deploying to subpath\n  routes,\n});\n\n// Navigation Guard (basic example)\nrouter.beforeEach((to, from, next) => {\n  // const loggedIn = localStorage.getItem('admin-token'); // Simple token check (old way)\n  const isAdminLoggedIn = localStorage.getItem('isAdminLoggedIn') === 'true';\n\n  if (to.matched.some((record) => record.meta.requiresAuth) && !isAdminLoggedIn) {\n    next('/login');\n  } else if (to.path === '/login' && isAdminLoggedIn) {\n    next('/'); // Redirect to dashboard if trying to access login page while already logged in\n  } else {\n    next();\n  }\n});\n\nexport default router;\n"],"mappings":";;AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,aAAa,MAAM,4BAA4B;AACtD,OAAOC,SAAS,MAAM,wBAAwB;AAE9C,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEJ;AACb,CAAC,EACD;EACEE,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEL,aAAa;EACxBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAChC;AACA;AACA;AACA;AAAA,CACD;AAED,MAAMC,MAAM,GAAGV,YAAY,CAAC;EAC1BW,OAAO,EAAEV,gBAAgB,CAACW,OAAO,CAACC,GAAG,CAACC,QAAQ,IAAI,GAAG,CAAC;EAAE;EACxDV;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC;EACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,KAAK,MAAM;EAE1E,IAAIL,EAAE,CAACM,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAAChB,IAAI,CAACC,YAAY,CAAC,IAAI,CAACU,eAAe,EAAE;IAC7ED,IAAI,CAAC,QAAQ,CAAC;EAChB,CAAC,MAAM,IAAIF,EAAE,CAACX,IAAI,KAAK,QAAQ,IAAIc,eAAe,EAAE;IAClDD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;EACb,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}